<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[http & web servers note02 your first web server]]></title>
      <url>%2F2017%2F12%2F18%2Fhttp-web-servers-note02-your-first-web-server%2F</url>
      <content type="text"><![CDATA[这篇博文是记录学习udacity的课程http &amp; web servers的第二篇。 练习：运行你的第一个网络服务器服务器只需要做一件事：处理收到的请求。Python的http.server模块可以你的电脑上运行一个内置的网络服务器。 开一个终端，cd到一个含有一些文件的目录，可以是文本文件，html文件或者图片，然后在终端运行：python3 -m http.server 8000。 浏览器键入：http://localhost:8000/ 。这个示例服务器是一个真正的网络服务器。如果该本地网络还有其他的电脑，你可以使用其他电脑获取该服务器上的文件。当你在浏览器键入localhost:8000，你的浏览器会向你正在运行的python程序发送http请求。这个程序会返回一段数据，浏览器会展示给你。 Note:如果刚才的目录下，你有一个文件叫做index.html，你会看到index.html的内容，而不是目录下的文件列表。将index.html移动到其他地方，你看到的又是目录下的文件列表。 什么是服务器？A server is just a program that accepts connections from other programs on the network. 当你开始一个服务器程序，它等着客户端连接到它-就像刚才的示例服务器等着浏览器向它请求一个页面一样。当连接来了，服务器运行一段代码 - 比如运行一个函数 - 来处理每一个到来的连接。就像是打电话：通过这个渠道，服务器和客户端可以互聊。网络客户端通过连接发送请求，服务器发送响应回来。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[http & web servers note01 preparation]]></title>
      <url>%2F2017%2F12%2F18%2Fhttp-web-servers-note01-introduction%2F</url>
      <content type="text"><![CDATA[这篇博文是记录学习udacity的课程http &amp; web servers的第一篇。 准备工作 安装python3 安装git 安装Nmap 在两个终端测试ncat程序 安装Nmap Windows: 下载运行 https://nmap.org/dist/nmap-7.30-setup.exe Mac (with Homebrew):在终端运行 brew install nmap Mac (without Homebrew): 下载安装 https://nmap.org/dist/nmap-7.30.dmg Debian/Ubuntu/Mint: 终端运行 sudo apt-get install nmap 检查ncat是否正确安装运行，开2个终端，其中一个运行ncat -l 9999,另一个运行ncat localhost 9999.然后在其中一个终端输入一些内容，按enter键，应该可以在令一个终端看到输入的内容。其中一个ncat程序在这里充当了一个简单的网络服务器的角色，令一个充当客户端角色。 Note:如果发生错误如“Address already in use”,表示你电脑中已经有其他程序在使用9999端口。你可以换个端口使用。注意客户端和服务器需要使用同一个端口。在终端输入Control-C退出ncat程序。如果先输入的是服务器端，客服端会自动推出。因为服务器关闭会自动中断链接。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[HTTP-Caching]]></title>
      <url>%2F2017%2F12%2F13%2FHTTP-Caching%2F</url>
      <content type="text"><![CDATA[Validating cached responses with ETags The server uses the ETag HTTP header to communicate a validation token. The validation token enables efficient resource update checks:no data transferred if the resource has not changed.Ensure that the server is providing the necessary ETag tokens. Check your server documentation for the necessary configuration flags. Cache-Control Each resource can define its caching policy via the Cache-Control HTTP header. Cache-Control directives control who can cache the response, under which conditions, and for how long. “no-cache” and “no-store”“no-cache” indicates that the returned response can’t be used to satisfy a subsequent request to the same URL without first checking with the server if the response has changed. As a result, if a proper validation token (ETag) is present, no-cache incurs a roundtrip to validate the cached response, but can eliminate the download if the resource has not changed. By contrast, “no-store” is much simpler. It simply disallows the browser and all intermediate caches from storing any version of the returned response—for example, one containing private personal or banking data. Every time the user requests this asset, a request is sent to the server and a full response is downloaded. “public” vs. “private”If the response is marked as “public”, then it can be cached, even if it has HTTP authentication associated with it, and even when the response status code isn’t normally cacheable. Most of the time, “public” isn’t necessary, because explicit caching information (like “max-age”) indicates that the response is cacheable anyway. By contrast, the browser can cache “private” responses. However, these responses are typically intended for a single user, so an intermediate cache is not allowed to cache them. For example, a user’s browser can cache an HTML page with private user information, but a CDN can’t cache the page. “max-age”This directive specifies the maximum time in seconds that the fetched response is allowed to be reused from the time of the request. For example, “max-age=60” indicates that the response can be cached and reused for the next 60 seconds. Define optimal Cache-Control policyhttps://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/images/http-cache-decision-tree.png Invalidating and updating cached responses Locally cached responses are used until the resource “expires.” Embedding a file content fingerprint in the URL enables you force the client to update a new version of the response. Each application needs to define its own cache hierarchy for optimal performance. All HTTP requests that the browser makes are first routed to the browser cache to check whether there is a valid cached response that can be used to fulfill the request. If there’s a match, the response is read from the cache, which eliminates both the network latency and the data costs that the transfer incurs. How do you get the best of both worlds: client-side caching and quick updates? You change the URL of the resource and force the user to download the new response whenever its content changes. Typically, you do this by embedding a fingerprint of the file, or a version number, in its filename—for example, style.x234dff.css. Caching checklist Use consistent URLs:if you serve the same content on different URLs, then that content will be fetched and stored multiple times. Ensure that the server provides a validation token (ETag): validation tokens eliminate the need to transfer the same bytes when a resource has not changed on the server. Identify which resources can be cached by intermediaries: those with responses that are identical for all users are great candidates to be cached by a CDN and other intermediaries. Determine the optimal cache lifetime for each resource:different resources may have different freshness requirements. Audit and determine the appropriate max-age for each one. Determine the best cache hierarchy for your site:the combination of resource URLs with content fingerprints and short or no-cache lifetimes for HTML documents allows you to control how quickly the client picks up updates. Minimize churn: some resources are updated more frequently than others. If there is a particular part of a resource (for example, a JavaScript function or a set of CSS styles) that is often updated, consider delivering that code as a separate file. Doing so allows the remainder of the content (for example, library code that doesn’t change very often), to be fetched from cache and minimizes the amount of downloaded content whenever an update is fetched.]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[web-font-optimization]]></title>
      <url>%2F2017%2F12%2F12%2Fweb-font-optimization%2F</url>
      <content type="text"><![CDATA[Anatomy of a webfont Unicode fonts can contain thousands of glyphs. There are four font formats:WOFF2,WOFF,EOT,and TTF. Some font formates require the use of compression. Webfont formats: EOT:IE only TTF:partial IE support WOFF:widest support but not available in some older browsers WOFF2:in progress for many browsers There is no single format that works in all browsers,which means that we need to deliver multiple fomats to provide consistent experience: Serve WOFF 2.0 variant to browsers that support it. Serve WOFF variant to the majority of browsers. Serve TTF variant to old Android (below 4.4) browsers. Serve EOT variant to old IE (below IE9) browsers. Reducing font size with compressionA font is a collection of glyphs, each of which is a set of paths describing the letter form. The individual glyphs are different, but they contain a lot of similar information that can be compressed with GZIP or a compatible compressor: EOT and TTF formats are not compressed by default. Ensure that your servers are configured to apply GZIP compression when delivering these formats. WOFF has built-in compression. Ensure that your WOFF compressor is using optimal compression settings. WOFF2 uses custom preprocessing and compression algorithms to deliver ~30% file-size reduction over other formats. Note: Consider using Zopfli compression for the EOT, TTF, and WOFF formats. Zopfli is a zlib compatible compressor that delivers ~5% file-size reduction over gzip. Define a font family with @font-face Use the format() hint to specify multiple font formats. Subset large Unicode fonts to improve performance. Use Unicode-range subsetting and provide a manual subsetting fallback for older browsers. Reduce the number of stylistic font variants to improve the page- and text-rendering performance. The browser requests the HTML document. The browser begins parsing the HTML response and constructing the DOM. The browser discovers CSS, JS, and other resources and dispatches requests. The browser constructs the CSSOM after all of the CSS content is received and combines it with the DOM tree to construct the render tree. Font requests are dispatched after the render tree indicates which font variants are needed to render the specified text on the page. The browser performs layout and paints content to the screen. If the font is not yet available, the browser may not render any text pixels. After the font is available, the browser paints the text pixels. The “race” between the first paint of page content, which can be done shortly after the render tree is built, and the request for the font resource is what creates the “blank text problem” where the browser might render page layout but omits any text.]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[automate-image-optimization]]></title>
      <url>%2F2017%2F12%2F04%2Fautomate-image-optimization%2F</url>
      <content type="text"><![CDATA[https://github.com/imagemin/imageminhttps://github.com/jcupitt/libvips compress images tools: ImageOptim MozJPEG Progressive JPEG pngquant SVGO Instead of crazy huge animated GIFs, deliver H.264 videos (or WebM for Chrome, Firefox and Opera)! gif: https://github.com/pornel/giflossy image optimisation Choose the right format Size approriately Adapt intelligently Compress carefully Prioritize critical images Lazy-load the rest Take care with tools Tools and libraries like ImageMagick, libjpeg, jpegtran, jpeg-recompress and imagemin support exporting Progressive JPEGs. SVG can be powerful for icons, offering a way to represent visualizations as a sprite without the quirky workarounds needed for icon fonts. It has more granular CSS styling control than icon fonts (SVG stroke properties), better positioning control (no need to hack around pseudo-elements and CSS display) and SVGs are much more accessible. Tools like svg-sprite and IcoMoon can automate combining SVGs into sprites which can be used via a CSS Sprite, Symbol Sprite or Stacked Sprite. Una Kravetz has a practical write-up on how to use gulp-svg-sprite for an SVG sprite workflow worth checking out. Sara Soudein also covers making the transition from icon fonts to SVG on her blog. Always comprese from the original image. Recompressing images has consequences. When editing your source files,store them in a lossless format like PNG or TIFF,so you preserve as much as quality as you can. Resizing and decoding images are expensive operations for a browser on average mobile hardware.Serve the smallest images for your target screen sizes and resolutions, taking advantage of srcset and sizes. Omitting the width or height attributes on an image can also negatively impact performance. Without them, a browser assigns a smaller placeholder region for the image until sufficient bytes have arrived for it to know the correct dimensions. At that point, the document layout must be updated in what can be a costly step called reflow.]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[notes of loading performance]]></title>
      <url>%2F2017%2F11%2F30%2Fnotes-of-loading-performance%2F</url>
      <content type="text"><![CDATA[Understanding Low Bandwith and High Latency introduce tools to emulate network Use timeouts to handle intermittent connectivity Optimizing Content EfficiencyEliminating Unnecessary DownloadsTL;DR - Inventory your own assets and third-party assests on your pages. - Measure the performance of each asset:its value and its technical performance - Determine if the resources are providing sufficient value Eliminate unnecessary resources from application. - you&apos;ve always included resource x on your pages,but doest the cost of downloading and displaying it offset the value it delivers to the user? Can you measure and prove its value? - Does the resource(especially if it&apos;s a third-party resource) deliver consistent performance?Is that resource in the critical path,or need to be?If the rescource is in the critical path,could it be a single point of failure for the site?That is,if the resource is unavailable,does it affect performance and the user experience of your page? - Does this resource need or have an SLA?Does this resource follow performance best practices:compression,caching,and so on. Too often,pages contain resources that are unnecessary,or worse,that hinder page performance without delivering much value to the visitor or to the site they&apos;re hosted on.This applies equally to first-party and third-party resources and widgets. Optimizing Encoding and Transfer Size of Text-Based Assets1. Data compression 101 TL;DR: - Compression is the process of encoding information using fewer bits. - Eliminating unnecessary data always yields the best results. - There are many different compression techniques and algorithms. - You will need a varity of techniques to achieve the best compression. 2. Minification:preprocessing &amp; context-specific optimizations TL;DR: - Content-specific optimizations can significantly reduce the size of delivered resources. - Content-specific optimizations are best applied as part of your build/release cycle. 3. Text compression with GZIP TL;DR: - GZIP performs best on text-based assets:CSS,JavaScript,HTML - All modern browsers support GZIP compression and will automatically request it. - Your server must be configured to enable GZIP compression. - Some CDNs require special care to ensure that GZIP is enabled. - Apply content-specific optimizations first: CSS, JS, and HTML minifiers. - Apply GZIP to compress the minified output. Enabling GZIP is one of the simplest and highest-payoff optimizations to implement, and yet, many people don&apos;t implement it. Most web servers compress content on your behalf, and you just need to verify that the server is correctly configured to compress all the content types that benefit from GZIP compression. A quick and simple way to see GZIP in action is to open Chrome DevTools and inspect the “Size / Content” column in the Network panel: “Size” indicates the transfer size of the asset, and “Content” the uncompressed size of the asset. Image OptimizationEliminating and replacing imagesTL;DR: - Eliminate unnecessary image resources - Leverage CSS3 effects where possible - Use web fonts instead of encoding text in images Vector vs. Raster imagesTL;DR： - Vector images are ideal for iamges that consists of geometric shapes - Vector images are zoom and resolution-independent - Raster images shoud be used of complex scenes with lots of irregular shapes and details Implications of high-resolution screensTL;DR - High resolution screens have multiple device pixels per css pixel - High resolution images require significantly higher number of pixels and bytes - Image optimization techniques are the same regardless of resolution prefer vector images wherever possible. if a raster image is required,deliver and optimize multiple variants of each imagewith of help of srcset and picture. Optimizing vector imagesTL;DR - SVG is an XML-based image format - SVG files shoud be minified to reduce their size (tool:svgo) - SVG files to compressed with GZIP Optimizing raster imagesTL;DR - A raster images is a grid of pixels - Each pixel encodes color and transparency information - Image compressors use a variety of techniques to reduce the number of required bits per pixel to reduce file size of the image Lossless vs loosy image compressionTL;DR - Due to how our eyes work,images are great candidates for lossy compression - Image optimization is a function of lossy and lossless compression - Differences in image formats are due to the difference in how and which lossy and lossless algorithms are used to optimize the images - There is no single best format or &quot;quality setting&quot; for all images:each combination of particular compressor and image contents produce a unique output Selecting the right image formatTL;DR - Start by selecting the right universal format:gif,png,jepg - Experiment and select the best settings for each format:quality,palette size,etc - Consider adding WebP and JPEG XR assets for modern clients 1. Do you need animation? If so, GIF is the only universal choice 1. Do you need to preserve fine detail with highest resolution? Use PNG. 1. Are you optimizing a photo,screenshot,or a similar image asset? Use JPEG. WebP and JPEG XR : - Some CDNS provide image optimization as a service,including JPEG XR and WebP delivery. - Some open-source tools(for example,PageSpeed for Apache or Nginx) automate the optimization,conversation,and serving of approriate assets. - You can add additional application logic to detect the client,check which formats they support,and serve the best availlable image format. Tools and parameter turning- gifsicle:create and optimize GIF images - jpegtran:optimize JPEG images - optipng:lossless PNG optimization - pngquant:lossy PNG optimization Deliver scaled image assetsTL;DR - Deliver scaled assets is one of the simplest and most effective optimizations - Pay close attention to large assets as they result in high overhead - Reduce the number of unnecessary pixels by scaling your images to their display size Image optimization boils down to two criteria: optimizing the number of bytes used to encode each image pixel, and optimizing the total number of pixels: the filesize of the image is simply the total number of pixels times the number of bytes used to encode each pixel. Nothing more, nothing less. As a result, one of the simplest and most effective image optimization techniques is to ensure that we are not shipping any more pixels than needed to display the asset at its intended size in the browser. Sounds simple, right? Unfortunately, most pages fail this test for many of their image assets: typically, they ship larger assets and rely on the browser to rescale them - which also consumes extra CPU resources - and display them at a lower resolution. **you should ensure that the number of unnecessary pixels is minimal, and that your large assets in particular are delivered as close as possible to their display size.** Image optimization checklist- __Prefer vector formats__ - __Minify and compress SVG assets__ - __Pick best raster image format__ - __Experiment with optimal quality settings for raster formats__ - __Remove unnecessary image metadata__ - __Serve scaled images__ - __Automate__:invest into automated tools and infrastructure that will ensure that all of your image assets are always optimized reference:https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/image-optimization]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[performance notes]]></title>
      <url>%2F2017%2F11%2F30%2Fperformance-notes%2F</url>
      <content type="text"><![CDATA[Mearsure Performance with Rail Modelresponse,animation,idle,loadTL;DR - Focus on the user;the goal isn&apos;t to make your site perform fast on any specific device, its to ultimately make users happy. - Respond to users immediately;acknowledge user input in under 100ms. - When animating or scrolling,produce a frame in under 10ms. - Maxmize main thread idle time. - Keep users engaged;deliver interactive content in under 1000ms. Focus on the userResponse:respond in under 100msAnimation:produce a frame in 10msIdle:maximize idle timeUse idle time to complete deferred work. For example, keep pre-load data to aminimum so that your app loads fast, and use idle time to load remainning data/ Deferrend work should be grouped into blocks of about 50ms. Should a user begin interacting, then the highest priority is to respond to that. To allow for &amp;lt;100ms response,the app must yield control back to main thread every &amp;lt;50ms,such that can execute its pixel pipeline,react to user input,and so on. Working in 500ms blocks allows the task to finish while still ensuring instant response. Load:deliver content under 100msLoad your site in under 1 second. Focus on optimizing the critical rendering path to unblock rendering. You don&apos;t have to load everything in under 1 second to produce the perception of a complete load.Enable progressive rendering and do some work in the background.Defer non-essential loads to periods of idle time. reference:https://developers.google.com/web/fundamentals/performance/rail]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[css布局学习]]></title>
      <url>%2F2017%2F11%2F21%2Fcss%E5%B8%83%E5%B1%80%E5%AD%A6%E4%B9%A0%2F</url>
      <content type="text"><![CDATA[max-width 使用max-width替代width可以使浏览器更好地处理小窗口的情况。所有主流浏览器斗支持max-width，包括ie7+. 1234#main&#123; max-wdith:600px; margin:0 auto;&#125; box-sizing 传统的盒子模型不直接，所以新增了box-sizing的css属性。当你设置元素的CSS box-sizing:border-box;时，此原属的内边距和边框不再会增加它的宽度。 不过 box-sizing 是个很新的属性，目前需要使用 -webkit- 和 -moz- 前缀。这可以启用特定浏览器实验中的特性。同时记住它是支持IE8+的。 position static 默认值。任意CSS position:static;的元素表示不会被特殊定位。 relative fixed 一个固定定位CSS position:fixed;元素会相对于视窗来定位，这意味着即使页面滚动，它还是会停留在相同的位置。和CSS position:relative;一样，top\right\bottom\left属性都可用。 脱离文档流。 移动浏览器对fixed支持很差。 absolute absolute 是最棘手的position值。 absolute 与 fixed 的表现类似，但是它不是相对于视窗而是相对于最近的“positioned”祖先元素。如果绝对定位（position属性的值为absolute）的元素没有“positioned”祖先元素，那么它是相对于文档的 body 元素，并且它会随着页面滚动而移动。记住一个“positioned”元素是指 position 值不是 static 的元素。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[测试浮动崩溃]]></title>
      <url>%2F2017%2F10%2F25%2Ffloat-test%2F</url>
      <content type="text"><![CDATA[While floats do provide quite a bit of fire power, they do come with a few of their own problems. The most popular problem involves a parent element that contains numerous floated elements. Content on the page will respect the size and placement of the floated children element, but these floated elements no longer impact the outer edges of the parent container. In this event the parent element loses context of exactly what it contains and collapses, thus giving the parent element a height of 0 and ignoring various other properties. A lot of times this may go unnoticed, specifically when the parent element doesn’t have any styles tied to it and the nested elements look to have aligned correctly. Should the nested elements not line up correctly, styling errors may appear. Taking a look at the demo below, the .box-set division should have a light gray background, however the background is not seen as all of the elements nested within it are floated. Upon inspecting the .box-set division you will see it has a height of 0. reference:https://learn.shayhowe.com/advanced-html-css/detailed-css-positioning/]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[2017/10/23 review my new year goal]]></title>
      <url>%2F2017%2F10%2F23%2F2017-10-23%2F</url>
      <content type="text"><![CDATA[回顾自己的2017目标： 学习目标 Expert knowledge of HTML5, CSS, Javascript, and W3C compliance这个目标很难衡量，但我知道我今年并没有花时间去系统全面的学习这些。完成度0%。 Knowledge of advanced CSS using a preprocessor(SCSS&amp;Gulp)会用sass了。这个目标完成度只有20%。 TypeScript (2017/1/20学习完成基本语法概念)没有在实际项目中使用，学好的语法知识现在已经全部忘记了。在练习中学习在项目中学习在实践中学习才是王道。 NodeJS完全没有花时间去学习。 PYTHON完全没有花时间在这个上面。 英语词汇量到2万，目前一万八完成了。每天20分支保持住了。健身目标 目前体重 51.4kg，希望年底能到45kg。现在47.5kg，希望年底能达成这个目标。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[a-pixel-is-not-a-pixel]]></title>
      <url>%2F2017%2F06%2F05%2Fa-pixel-is-not-a-pixel%2F</url>
      <content type="text"><![CDATA[The tricky bitsHowever, there are two tricky bits: the device-width media query and the &lg;meta name=”viewport” width=”device-width” &gt;tag. Both work with device pixels, and not with CSS pixels, because they report on the context of the web page, and not on its inner CSS workings.device-width媒体查询和&lg; meta name=”viewport” width=”device-width” &gt;都是指设备像素，而不是css像素。 The media queryThe device-width media query measures the width of the device in device pixels. The width media query measures the total width of the page in CSS pixels, which, for reasons I’ll explain later, is at least 980px on the iPhone.The device-width media query works as follows:1234567891011div.sidebar &#123; width: 300px;&#125;@media all and (max-device-width: 320px) &#123; // styles assigned when device width is smaller than 320px; div.sidebar &#123; width: 100px; &#125;&#125; Now the sidebar is 300 CSS pixels wide, except when the device width is 320 device pixels or less, in which case it becomes 100 CSS pixels wide.侧边栏为300 css像素宽，除非设备的宽度小于等于320,此时，侧边栏的css像素变为100px.By the way, in theory you could use a media query that queries the device screen in centimeters or inches (@media all and (max-device-width: 9cm)). Unfortunately it seems badly to outright unsupported, even by the iPhone. The problem here is that physical units such as inches are usually translated to (CSS) pixels; thus width: 1in equals 96 pixels on all browsers I tested so far (and that’s quite a few). So these media queries are unreliable.理论上说可以使用设备屏幕的厘米或者英寸来媒体查询。但是基本浏览器都不支持。 The tagIn general &lt;meta name=”viewport” content=”width=device-width” &gt; is even more useful. This tag, originally Apple-proprietary but meanwhile supported by many more mobile browsers, actually makes the layout viewport fit the device exactly.Now what is the layout viewport? It’s the area (in CSS pixels) that the browser uses to calculate the dimensions of elements with percentual width, such as div.sidebar {width: 20%}. It’s usually quite a bit larger than the device screen: 980px on the iPhone, 850px on Opera, 800 on Android, etc. If you add &lt;meta name=”viewport” content=”width=device-width” &gt;, the width of this layout viewport is constrained to the device width in device pixels; 320 of them in the iPhone’s case. So basically Google has already inserted a layer of what are apparently called dips; device-independent pixels. This layer comes between the official, reported screen size and the CSS pixels web developers work with.]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[git add 详解]]></title>
      <url>%2F2017%2F06%2F05%2Fgit-add%2F</url>
      <content type="text"><![CDATA[1、前言git add命令主要用于把我们要提交的文件的信息添加到索引库中。当我们使用git commit时，git将依据索引库中的内容来进行文件的提交。 2、基本git add &lt; path &gt;表示 add to index only files created or modified and not those deleted通过git add &lt; path &gt;的形式把我们&lt; path &gt;添加到索引库中，&lt; path &gt;可以是文件也可以是目录。git不仅能判断出&lt; path &gt;中，修改（不包括已删除）的文件，还能判断出新添的文件，并把它们的信息添加到索引库中。 3、git add -ugit add -u 表示 add to index only files modified or deleted and not those created git add -u [&lt; path &gt;]: 把&lt; path &gt;中所有tracked文件中被修改过或已删除文件的信息添加到索引库。它不会处理untracted的文件。省略&lt; path &gt;表示.,即当前目录。 4、git add -Agit add -A: [&lt; path &gt;]表示把&lt; path &gt;中所有tracked文件中被修改过或已删除文件和所有untracted的文件信息添加到索引库。省略&lt; path &gt;表示.,即当前目录。 5、git add -i我们可以通过git add -i [&lt; path &gt;]命令查看&lt; path &gt;中被所有修改过或已删除文件但没有提交的文件，并通过其revert子命令可以查看&lt; path &gt;中所有untracted的文件，同时进入一个子命令系统。 5.1、revert子命令可以通过git add -i的revert子命令（3: [r]evert）把已经添加到索引库中的文件从索引库中剔除。（3: [r]evert）表示通过3或r或revert加回车执行该命令。执行该命令后，git会例出索引库中的文件列表.然后通过数字来选择。输入”1”表示git会例出索引库中的文件列表中的第1个文件。“1-15”表示git会例出索引库中的文件列表中的第1个文件到第15个文件.回车将执行。如果我们不输入任何东西，直接回车，将结束revert子命令，返回git add -i的主命令行。 5.2、update子命令可以通过update子命令（2: [u]pdate）把已经tracked的文件添加到索引库中。其操作和revert子命令类似。 5.3、add untracked子命令通过add untracked子命令（4: [a]dd untracked）可以把还没被git管理的文件添加到索引库中。其操作和revert子命令类似。 5.4、diff子命令可以通过diff子命令（6: [d]iff）可以比较索引库中文件和原版本的差异。其操作和revert子命令类似。 5.5、status子命令status子命令(1: [s]tatus)功能上和git add -i相似 5.6、quit子命令quit子命令（7: [q]uit）用于退出git add -i命令系统 6、帮助我们可以通过git add -h命令来看git add命令的帮助文档。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[设备像素、设备独立像素、css像素]]></title>
      <url>%2F2017%2F06%2F01%2Fabout-pixel%2F</url>
      <content type="text"><![CDATA[definition设备像素:又称物理像素（physical pixel），设备能控制显示的最小单位，我们可以把这些像素看作成显示器上一个个的点。 CSS像素CSS像素是Web编程的概念，独立于设备的用于逻辑上衡量像素的单位，也就是说我们在做网页时用到的CSS像素单位，是抽象的，而不是实际存在的。 设备独立像素：(也叫密度无关像素)，可以认为是计算机坐标系统中的一个点，这个点代表一个可以由程序使用并控制的虚拟像素(比如：CSS 像素,只是在android机中CSS 像素就不叫”CSS 像素”了而是叫”设备独立像素”)，然后由相关系统转换为物理像素。 在PC端可以通过screen.width/height属性来获取设备独立像素值，在PC端这个值把它当成我们常说的屏幕分辨率（实际上它不是，但是由于在PC端设备像素和设备独立像素数值相等，才有这么一个不准确的说法）。但你把浏览器切换到设备模式时，也就是在移动端环境下通过上面的screen.width/height获取的不是移动设备的分辨率，而是移动设备的屏宽/高（这里只是猜测），如：Iphone 5s下screen.width =320、screen.height = 568。本以为是浏览器里的设备环境没有完全模拟真实的移动设备环境，可是用真机测试时，还是出现同样的结果screen.width =320、screen.height = 568。值得注意的是：不管你手机是否切换到横屏，这两个值还是一样的。所以不管是移动端还是PC端通过screen.width/height获取的这个值是设备独立像素（CSS 像素），而不是设备的屏幕分辨率，因为设备的屏幕分辨率对于WEB开发者来说是无法通过代码来获得的，是完全透明的. 摘自：http://yunkus.com/physical-pixel-device-independent-pixels/]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[devicePixelRatio]]></title>
      <url>%2F2017%2F05%2F31%2FdevicePixelRatio%2F</url>
      <content type="text"><![CDATA[definitionwindow.devicePixelRatio is the ratio between physical pixels and device-independent pixels (dips) on the device.window.devicePixelRatio = physical pixels / dips Dips are the abstract pixels that are used to feed information to the width/height media queries and the meta viewport device-width. relation with other propertiesdips:设置页面的&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;，获取document.documentElement.clientWidth，大部分浏览器会返回viewport layout的宽度，即为dips summary devicePixelRatio is mostly trustworthy on most browsers. On iOS devices, multiply devicePixelRatio by screen.width to get the physical pixel count. On Android and Windows Phone devices, divide screen.width by devicePixelRatio to get the dips count.]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[a-bit-of-pixels]]></title>
      <url>%2F2017%2F05%2F31%2Fa-bit-of-pixels%2F</url>
      <content type="text"><![CDATA[dips:device independent pixels当页面设置了1&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt; 的时候，document.documentElement.clientWidth在大部分浏览器下，得到的是布局视区的宽度，等同于dips的宽度。 screen.width对于screen.width的值： 在iOS视网膜设备上，screen.width返回dips宽。因此，在竖着显示的时候，视网膜显示屏的ipad和非视网膜显示屏的ipad返回的都是768. 在某些Android设备上，screen.width返回的是物理像素宽度 summary devicePixelRatio在大多数浏览器是值得信赖的. 在iOS设备，screen.width乘以devicePixelRatio得到的是物理像素值。 在Android以及Windows Phone设备，screen.width除以devicePixelRatio得到的是设备独立像素(dips)值。 摘自：http://www.zhangxinxu.com/wordpress/2012/08/window-devicepixelratio/]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[learn-compass]]></title>
      <url>%2F2017%2F05%2F27%2Flearn-compass%2F</url>
      <content type="text"><![CDATA[It’s important to remember that long selectors incur a small rendering performance penalty that in aggregate can slow down your web page. There is no need to exactly mimic your document structure in your css. Instead nest only deep enough that the selector is unique to that part of the document. For instance, don’t use table thead tr th when a simple th selector will suffice. This might mean that you have to separate your styles into several selectors and let the document cascade work to your advantage.摘自：http://compass-style.org/help/tutorials/best_practices/ 长的选择器会影响渲染表现，累积起来会导致页面变慢。没有必要在css里效仿你的文档结构。只需要嵌套到该选择器在该部分文档唯一的就足够了。比如，当一个简单的th选择器就够了的时候，不要使用table thead tr th。这意味着你必须把样式分散在几个选择器中。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[font-face]]></title>
      <url>%2F2017%2F05%2F23%2Ffont-face%2F</url>
      <content type="text"><![CDATA[昨天要改一个很简单的需求，把网站的标题改下。修改了html，发现字体很奇怪。有的是设计师给的，有的不是。 本以为需要切图，查看了源码，发现字体文件只有之前标题的那几个字。新增的字没有办法应用那个字体。 找设计师要来了他的字体文件，truetype的，解压。上传到http://transfonter.org。把自己需要的那几个字，也就是新的标题转为svg,woff,ttf,eot,woff2格式。替换掉原来的font文件即可。 12345678910@font-face &#123; font-family: "myfont"; src: url("../font/myfont.eot"); /* IE9 */ src: url("../font/myfont.eot?#iefix") format("embedded-opentype"), /* IE6-IE8 */ url("../font/myfont.woff") format("woff"), /* chrome, firefox */ url("../font/myfont.ttf") format("truetype"), /* chrome, firefox, opera, Safari, Android, iOS 4.2+ */ url("../font/myfont.svg#myfont") format("svg"); /* iOS 4.1- */ font-style: normal; font-weight: normal;&#125; 查看为何这段代码生效：http://blog.fontspring.com/2011/02/the-new-bulletproof-font-face-syntax/1234567@font-face &#123; font-family: 'MyFontFamily'; src: url('myfont-webfont.eot?#iefix') format('embedded-opentype'), url('myfont-webfont.woff') format('woff'), url('myfont-webfont.ttf') format('truetype'), url('myfont-webfont.svg#svgFontName') format('svg'); &#125;]]></content>
    </entry>

    
    <entry>
      <title></title>
      <url>%2F2017%2F05%2F16%2FSmearWorker%2F</url>
      <content type="text"><![CDATA[// 从主线程获取ImageData对象，对其进行处理并将它传递回去 onmessage=function(e){ if(typeof e.data === 'string'){ console.log("Worker: "+e.data); return; } postMessage(smear(e.data)); } // 将ImageData中的像素信息向右涂抹，产生动态模糊效果 // 对于大图片，此方法会进行大量计算 // 如果它用在主线程中的画，很有可能导致无法响应ui操作的问题 function smear(pixels){ var data=pixels.data,width=pixels.width,height=pixels.height; var n=10,m=n-1;//设置n倍大，用于更多的涂抹 for(var row=0;row]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[图片文字垂直居中]]></title>
      <url>%2F2017%2F05%2F11%2Fvertical-aligin-middle%2F</url>
      <content type="text"><![CDATA[个数不定的文字内容与图片的垂直居中对齐1234&lt;div&gt;&lt;span&gt;文字们哈哈哈哈哈&lt;/span&gt;&lt;img src="/images/june.jpg"&gt;&lt;/div&gt; 12div&gt;span&#123;display:inline-block;width:210px;vertical-align:middle;&#125;div&gt;img&#123;vertical-align:middle;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[border与等高布局]]></title>
      <url>%2F2017%2F05%2F01%2Fborder-and-layout%2F</url>
      <content type="text"><![CDATA[12345678&lt;div class="box"&gt; &lt;nav class="left"&gt; &lt;h3&gt;导航1&lt;/h3&gt; &lt;/nav&gt; &lt;section&gt; &lt;div class="module"&gt;&lt;/div&gt; &lt;/section&gt;&lt;/div&gt; 12345678.box&#123; border-left:300px solid #222;&#125;.left&#123; width:300px; margin-left:-300px; float:left;&#125; reference:http://www.imooc.com/video/13378测试了上面的代码，发现没有实现等高布局。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[用border构建三角形]]></title>
      <url>%2F2017%2F05%2F01%2Fborder-and-triangle%2F</url>
      <content type="text"><![CDATA[利用border构建三角形 方案一123456.triangle&#123; border-width:12px 20px; border-style:solid; border-color:red red transparent transparent; font-size:0;&#125; 1&lt;a href="" class="triangle"&gt;&lt;/a&gt;//要使用行内元素 方案二1234567.triangle&#123; width:0px; height:0px; border-width:100px; border-style:solid; border-color:red transparent transparent transparent;&#125; 1&lt;div class="triangle&gt;&lt;/div&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[用echarts画个花花绿绿的甜甜圈图]]></title>
      <url>%2F2017%2F04%2F12%2Fuse-echarts-to-draw-colorful-donut-graph%2F</url>
      <content type="text"><![CDATA[ui的设计稿有个花花绿绿的甜甜圈图。因为项目的图都是echarts画的，所以，继续玩弄echarts。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170$(function()&#123; var chart = echarts.init(document.getElementById('city_level_chart')); var labelLineStyle=&#123;color:'#94A0B6',width:3&#125;; var labelStyle=&#123; show:true, formatter:'&#123;c&#125;个&#123;a&#125;', textStyle:&#123; color:'#94A0B6', fontSize:16 &#125; &#125;; var option = &#123; color: ['#EB4C39', '#EC6A2C','#F6C94A', '#EC6A2E','RGBA(64, 146, 222, 1.00)'], silent:true, series:[ &#123; type:'pie', clockwise:false, name:'一线城市', radius:['10%','20%'], itemStyle:&#123; normal:&#123; label:labelStyle, labelLine:&#123; show:true, length:5, length2:12, labelLine:labelLineStyle &#125; &#125; &#125;, data:[ &#123; value:3, itemStyle:&#123; normal:&#123; color:'#F5A29A', label:&#123;show:false&#125;, labelLine:&#123;show:false&#125; &#125; &#125; &#125;, &#123;value:1&#125; ] &#125;, &#123; type:'pie', clockwise:false, name:'二线城市', radius:['20%','30%'], itemStyle:&#123; normal:&#123; label:labelStyle, labelLine:&#123; show:true, length:5, length2:12, labelLine:labelLineStyle &#125; &#125; &#125;, data:[ &#123; value:27, itemStyle:&#123; normal:&#123; color:'RGBA(245, 179, 145, 0.8)', label:&#123;show:false&#125;, labelLine:&#123;show:false&#125; &#125; &#125; &#125;, &#123;value:3&#125; ] &#125;, &#123; type:'pie', clockwise:false, name:'三线城市', radius:['30%','40%'], itemStyle:&#123; normal:&#123; label:labelStyle, labelLine:&#123; show:true, length:5, length2:12, labelLine:labelLineStyle &#125; &#125; &#125;, data:[ &#123; value:66, itemStyle:&#123; normal:&#123; color:'RGBA(251, 226, 160, 0.8)', label:&#123;show:false&#125;, labelLine:&#123;show:false&#125; &#125; &#125; &#125;, &#123;value:4&#125; ] &#125;, &#123; type:'pie', clockwise:false, name:'四线城市', radius:['40%','50%'], itemStyle:&#123; normal:&#123; label:labelStyle, labelLine:&#123; show:true, length:5, length2:12, labelLine:labelLineStyle &#125; &#125; &#125;, data:[ &#123; value:90, itemStyle:&#123; normal:&#123; color:'RGBA(167, 221, 197, 0.8)', label:&#123;show:false&#125;, labelLine:&#123;show:false&#125; &#125; &#125; &#125;, &#123;value:0&#125; ] &#125;, &#123; type:'pie', clockwise:false, name:'五线城市', radius:['50%','60%'], itemStyle:&#123; normal:&#123; label:labelStyle, labelLine:&#123; show:true, length:5, length2:12, labelLine:labelLineStyle &#125; &#125; &#125;, data:[ &#123; value:128, itemStyle:&#123; normal:&#123; color:'RGBA(156, 198, 238, 0.8)', label:&#123;show:false&#125;, labelLine:&#123;show:false&#125; &#125; &#125; &#125;, &#123;value:1&#125; ] &#125; ] &#125;; chart.setOption(option);&#125;);]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[training-record]]></title>
      <url>%2F2017%2F03%2F17%2Ftraining-record%2F</url>
      <content type="text"><![CDATA[今天公司组织了培训，大神讲了很多原理性的东西，获益匪浅。我要跟着大神好好学习。今天把homepage的布局写好了。数据也沟通得差不多了。预计下周可以出来效果了。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[input的autofocus属性小坑]]></title>
      <url>%2F2017%2F03%2F14%2Fabout-autofocus-attribute-of-input%2F</url>
      <content type="text"><![CDATA[今天要修复一个小bug，当发生点击事件，会显示表单，要让表单内部的input自动获得焦点。我想当然给表单控件设置了autofocus属性，然而，没有生效。查看了下mdn的信息： autofocus HTML5This Boolean attribute lets you specify that a form control should have input focus when the page loads, unless the user overrides it (e.g. by typing in a different control). Only one form element in a document can have the autofocus attribute, which is a Boolean. It cannot be applied if the type attribute is set to hidden (that is, you cannot automatically set focus to a hidden control). Note that the focusing of the control may occur before the firing of the DOMContentLoaded event. 为何我的修改没有效果？因为我的页面列表是ajax请求数据生成的，而autofocus是在页面加载的时候就确定一个表单控件是否获取焦点。 Note that the focusing of the control may occur before the firing of the DOMContentLoaded event. 我的input标签是在页面加载完成之后才添加到dom中的;所以设置的autofocus没有生效。最后还是老老实获取表单元素，添加focus事件。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[利用padding布局]]></title>
      <url>%2F2017%2F03%2F13%2Fpadding-and-layout%2F</url>
      <content type="text"><![CDATA[使用百分比构建固定比例布局移动端：1:1 头图123div&#123; padding:50%;&#125; 配合margin实现等高布局很大的margin-bottom,padding-bottom值填充缺失的空间。123456789101112131415.box&#123; overflow:hidden; resize:vertical;&#125;.child-orange,child-green&#123; margin-bottom:-600px;padding-bottom:600px;&#125;.child-orange&#123; float:left; background-color:orange;&#125;.child-green&#123; float:left; background-color:green;&#125; 两栏自适应布局padding在容器上12345678&lt;div class="pbox"&gt; &lt;img src="xx.jpg"&gt; text here Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&lt;/div&gt; 1234567.pbox&#123; padding-left:120px;&#125;.pbox img&#123; float:left; margin-left:-120px;&#125; padding在子元素上123456789&lt;div&gt; &lt;img src="xx.jpg"&gt; &lt;div class="auto"&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&lt;/div&gt;&lt;/div&gt; 1234img&#123;float:left;&#125;.auto&#123; padding-left:120px;&#125; 内容参考来自张鑫旭的慕课网视频：(http://www.imooc.com/video/12600).]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[利用padding绘制图形]]></title>
      <url>%2F2017%2F03%2F13%2Fuse-padding-to-draw-graph%2F</url>
      <content type="text"><![CDATA[借助padding实现三道杠1&lt;div class="tri-line"&gt;&lt;/div&gt; 12345678.tri-line&#123; width:150px; height:30px; border-top:30px solid; boder-bottom:30px solid; background-color:currentColor; background-clip:content-box;&#125; 借助padding实现白眼效果1&lt;div class="eye"&gt;&lt;/div&gt; 123456789.eye&#123; width:150px; height:150px; padding:10px; border:10px solid; border-radius:50%; background-color:currentColor; background-clip:content-box;&#125; 参考:css padding与图形绘制–张鑫旭]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[表单元素内置padding值]]></title>
      <url>%2F2017%2F03%2F13%2Fpadding-of-form-elements%2F</url>
      <content type="text"><![CDATA[结论 所有浏览器的input／textarea都有内置padding值。 所有浏览器的button按钮都有内置padding值。 部分浏览器select下拉有padding值，比如firefox。ie8+可以设置padding值。 所有浏览器的radio/checkbox没有padding值。 button元素的padding很奇葩。。。 button元素的padding chrome ok firefox ok ieie7 下文字越多，padding越大，设置button{overflow:visible;}可以解决杀掉多余的padding值 padding高度计算不兼容 12345button&#123; line-height:20px; padding:10px; border:none;&#125; ie7 45px ?ie8+ 40px okfirefox 42px ?chrome 40px ok button兼容性不好，大大降低了平时开发中的使用率。平时多用a标签来代替，当需要原生的button按钮时候，建议方案： 12&lt;button id="btn"&gt;&lt;/button&gt;&lt;label for="btn"&gt;button&lt;/label&gt; 12345label&#123; display:inline-block; line-height:20px; padding:10px;&#125; 另外需要设置button的不可访问，非display:none;visible:hidden;而是绝对定位到屏幕之外或者设置z-index为-1,让button元素隐藏在背景色下。 兼容ie7， ie8+， firefox, chrome. 参考：标签元素的内置padding–css深入理解之padding-by张鑫旭]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[css简单代码实现正方形]]></title>
      <url>%2F2017%2F03%2F12%2Fcss%E7%AE%80%E5%8D%95%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E6%AD%A3%E6%96%B9%E5%BD%A2%2F</url>
      <content type="text"><![CDATA[简单代码实现正方形：1div&#123;padding: 50%&#125; 应用案例：很多移动端app头图1:1，屏幕尺寸大小不固定，让所有的屏幕大小下都是正方形。123456&lt;div class="container"&gt; &lt;div class="example"&gt; &lt;h2&gt;hello&lt;/h2&gt; &lt;h4&gt;other info&lt;/h4&gt; &lt;/div&gt;&lt;/div&gt; 1234567891011121314.container&#123; padding:50%; background:url(exp.jpg); background-size:100%; position:relative;&#125;.example&#123; position:absolute; top:0; right:0; bottom:0; left:0;&#125; 内容参考来自张鑫旭的慕课网视频：(http://www.imooc.com/video/12598 ).]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[如何避免table自动换行]]></title>
      <url>%2F2017%2F03%2F01%2F%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8Dtable%E8%87%AA%E5%8A%A8%E6%8D%A2%E8%A1%8C%2F</url>
      <content type="text"><![CDATA[HTML的表格渲染很特殊，当单元格的内容过长，就会自动换行，导致表格的显示很凌乱。只要添加2行css代码就可以解决这个问题。 对table元素，应用css代码： 1234/*让文本在同一行继续*/table&#123; white-space:nowrap&#125; 给table的父元素添加样式： 123.table-wraper&#123; overflow:auto; &#125; 不过这样生成的滚动条很随性。如果追求美观，需要再调整一下滚动条的样式。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[周总结]]></title>
      <url>%2F2017%2F02%2F17%2F%E5%91%A8%E6%80%BB%E7%BB%93%2F</url>
      <content type="text"><![CDATA[本周马不停蹄地写项目。在应用中发现自己的不足，还有很多需要学习的。css首当其冲。平时写得太少，导致用的时候踩了很多坑。比如一个sticy footer,看似简单，实现起来发现毛病真多。学习编程，真的是需要多多地敲代码，多多地应用，多多地测试。我很享受现在的工作。实现一个功能或者效果带来的巨大成就感，还有，找到解决办法的酸爽，推动着我继续前行。编程，真的是一项很有趣的手艺。我愿意为此投入时间与精力，而不只是当作谋生的手段。 现在工作中的大神，我真的很羡慕，我也想要成为那样的人。一个有专业技能的妇女。 打算有时间把https://css-tricks.com/这个网站的代码都实现下。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[养成良好的工作习惯]]></title>
      <url>%2F2017%2F02%2F08%2F%E5%85%BB%E6%88%90%E8%89%AF%E5%A5%BD%E7%9A%84%E5%B7%A5%E4%BD%9C%E4%B9%A0%E6%83%AF%2F</url>
      <content type="text"></content>
    </entry>

    
    <entry>
      <title><![CDATA[看不懂代码的忧伤]]></title>
      <url>%2F2017%2F02%2F04%2F%E7%9C%8B%E4%B8%8D%E6%87%82%E4%BB%A3%E7%A0%81%E7%9A%84%E5%BF%A7%E4%BC%A4%2F</url>
      <content type="text"><![CDATA[DJANGO的user模块，我搞了很久，还是不太懂。用大神写的代码，models里面定义的类似懂非懂。下午用sqlite命令，把用户表里面的数据展现出来了，能直观地看到用户信息了，然并卵，还是不会继续写。这个逻辑有点绕。 至少学了会儿sqlite的命令。。。忧伤的一个下午。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[一月总结]]></title>
      <url>%2F2017%2F02%2F03%2F%E2%80%9CJanuarySummary%E2%80%9D%2F</url>
      <content type="text"><![CDATA[一月健身总时间:1159分钟。主要是健步走。平均每天运动38分钟。然而没有减肥下来。扇贝英语听力单词打开23天。主要是上下班的车上背的。阅读完成《Thinking in CSS》、《Thinking in HTML》、《Thinking in Javascript》、《Flourish》。学习完成typescript的基本语法。 减肥之路道阻且长。健步走运动强度不大，效果不明显。需要加大运动强度了。买了跳绳，计划每天跳2000下。从二月开始。 原来体重51.4kg，现在51.2kg，姑且认为减肥有一丢丢的效果吧。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[reverse text]]></title>
      <url>%2F2017%2F01%2F23%2Freverse-text%2F</url>
      <content type="text"><![CDATA[实现文字从右到左。123&lt;div dir="rtl"&gt; right to left text&lt;/div&gt; 1234selector&#123; unicode-bidi:bidi-override; direction:rtl;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[用最少的css代码做star rating]]></title>
      <url>%2F2017%2F01%2F23%2Fstar-rating-with-css%2F</url>
      <content type="text"><![CDATA[参考链接 first-step: 直接用unicode 标记星星(编码utf-8,so easy)123&lt;div class="rating"&gt;&lt;span&gt;☆&lt;/span&gt;&lt;span&gt;☆&lt;/span&gt;&lt;span&gt;☆&lt;/span&gt;&lt;span&gt;☆&lt;/span&gt;&lt;span&gt;☆&lt;/span&gt;&lt;/div&gt; second-step: 给:hover添加伪元素，使得空心star变为实心123456.rating &gt; span:hover:before&#123; /*content属性与:before以及:after伪元素使用，插入生成内容。*/ /*该属性用于定义元素之前或之后放置的生成内容。默认地，这往往是行内内容，不过该内容创建的框类型可以用属性 display 控制。*/ content:"\2605"; position:absolute;&#125; third-step: 解决选择相邻同级元素的问题css 不能直接选择之前的同级元素，可以选择之后的同级元素。所以，这里我们把字符的顺序更改了，就可以使用同级元素了，选取on hover 元素之前的所有star了。12345678910.rating &#123; unicode-bidi: bidi-override; direction: rtl;&#125;.rating &gt; span:hover:before,.rating &gt; span:hover ~ span:before &#123; content: "\2605"; position: absolute; color: gold;&#125; summary一般网站的打分功能需要与后台交互。这个只是一个纯样式的，没有数据交互。可以使用radio 表单元素设计可以真正交互的star rating。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[2017 new year goal]]></title>
      <url>%2F2017%2F01%2F23%2F2017-new-year-plan%2F</url>
      <content type="text"><![CDATA[学习目标 Expert knowledge of HTML5, CSS, Javascript, and W3C compliance Knowledge of advanced CSS using a preprocessor(SCSS&amp;Gulp) TypeScript (2017/1/20学习完成基本语法概念) NodeJS PYTHON 英语词汇量到2万，目前一万八 健身目标 目前体重 51.4kg，希望年底能到45kg。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[test markdown]]></title>
      <url>%2F2017%2F01%2F23%2Ftext-markdown%2F</url>
      <content type="text"><![CDATA[just test markdown syntax 123var a=0;var b=10;console.log(a+b); frontend css html javascript backend python sql pg]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[猴年倒数第二个工作日]]></title>
      <url>%2F2017%2F01%2F23%2F%E7%8C%B4%E5%B9%B4%E5%80%92%E6%95%B0%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%B7%A5%E4%BD%9C%E6%97%A5%2F</url>
      <content type="text"><![CDATA[Lorem ipsum dolor sit amet, consectetur adipisicing elit. Sequi necessitatibus, quo ad quia cumque optio commodi facilis vero atque dolores at repellat, laborum officia iste omnis nam vitae! A, dolorum!Perferendis suscipit repudiandae reiciendis libero fugit voluptatem excepturi at maiores amet cumque dolorem, ex, totam, molestias nesciunt quibusdam nisi labore facere nulla soluta consectetur impedit in. Ipsum qui sint esse.Debitis blanditiis animi earum aliquid est facere similique minus quo saepe error pariatur perferendis deleniti necessitatibus sit, laboriosam, non, odit porro sapiente delectus quod laudantium obcaecati doloribus? Enim, a, saepe!Quidem accusantium eaque ipsa, fugiat ea iusto error harum perferendis. Soluta culpa a sequi incidunt libero ut, cum laboriosam blanditiis dolores accusantium numquam necessitatibus dolor voluptatibus, officiis ab repellendus quo.Vitae non deserunt mollitia doloremque consequuntur, inventore distinctio voluptates voluptas perferendis, minima iure incidunt accusantium eveniet est consectetur dignissimos? Ratione eligendi, nihil ullam, placeat esse amet deleniti. Optio qui, nihil?Fuga eos odit consequuntur asperiores sed architecto. Eaque ut hic qui, iure officiis non voluptate nesciunt cupiditate libero omnis ullam aperiam corporis, tempora sapiente est ducimus, provident placeat totam deleniti!]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2017%2F01%2F23%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
  
  
</search>
